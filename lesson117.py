# 재귀(recurision) 함수
# 자기 자신을 함수에서 호출 한다
# 무한 루프에 빠지게 되므로 빠져 나올 코드를 작성하고 함수 호출한다.
# 재귀 함수는 점화식을 코드로 표현한는데 장점을 가지고 있다.
# 점화선 : 폭탄의 점화선에 불을 붙이면 끝까지 타고 들어간다
# 점화식 : 수열의 첫항이 주어지고 점화식이 주어지면 수열이 불타올라 정의 된는 것
# 점화식 : 수열의 인접항의 관계
# 귀납적 정의 : 사람은 귀납적 동물
# 수열의 첫항 3을 보고 다음항 5을 보면 : 다음 항은 전항에 2를 더한 거야
# 경험으로 아는 거죠. 귀납적 사고
# 첫 항이 3이고, 다음항은 전항에다가 2 더한거야고 라고 하면
# 위에 있는 숫자가 점화식인 것이다.
# 3,5,7,9,...로 불이 활활 타오른다
# 점화식은 인접항의 관계, 앞뒤항의 관계 파악하면 쉽니다.
# 수열 : 특정한 규칙을 가진 수의 나열이다. 점화식도 수열이다.
# 등차수열 : 인접한 수의 차이가 같은 수의 나열
# A : 5,7,9,11,... 5를 초항,공통차(2)를 공차, 공차 2이고, 초항 5인 등차수열 

# 등차수열의 점화식의 값을 구하는 함수
def a(n):
    if n == 1:      # n 번째 1과 같은 값일때
        return 0    # 0을 리턴
    return a(n-1)+2 # n이 1이 아닌 경우에는 a(n-1)의 값을 구해서 2를 더한다

for i in range(1,6):
    print(a(i), end=' ')
# a(1)을 때 : 1==1일때이다. 함수는 0을 리턴한다.
# a(2)을 때 : 2==1일때이다. 함수는 a(1)+2를 리턴한다. 0 + 2
# a(3)을 때 : 3==1일때이다. 함수는 a(2)+2를 리턴한다. 0 + 2 + 2

# 피보나치 수열
'''
def fib(n):
    # n이 1,2일때 각각 1과 2를 리턴한다.
    if n == 0:
        return 0
    elif n == 1:
        return 1

def fib(n):
    # 2보다 큰 n을 인자로 받을때 
    if n<2:
        return n
'''
print()
def fib(n):
    if n < 2:
        return n
    return fib(n-1) + fib(n-2)
print(fib(10))