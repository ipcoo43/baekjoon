# 반복 가능한 객체(iterable), 이터레이터(iterator)는 별개의 객체
# iterable : 반복 가능한 객체는 요소를 한 번에 하나씩 가져올 수 있는 개체
# iterator : __next__ 메서드를 사용해서 차례대로 값을 꺼낼 수 있는 객체

# for 반복을 사용할 때 range 사용
# 5번을 반복한다면 
# for i in rnage(5):  
# 0부터 4까지 숫자를 만들어 낸다고 했는데
# 사실은 숫자를 모두 만들어 내는 것이 아니라 
# 0부터 4까지 값을 차례대로 꺼낼 수 있는 iterator를 하나만 만들어 낸다.
# 이후 반복할 때마다 iterator에서 숫자를 하나씩 꺼내서 반복한다.
# iterator만 생성하고 값이 필요한 시점이 되었을 때 값을 만드는 방식

# [ 반복 가능한 객체(iterable) ]
# 반복할 수 있는 객체, 문자열, 리스트, 딕셔너리,세트
# 요소가 여러 개 들어 있고, 한번에 하나씩 꺼낼 수 있는 객체
# __iter__() : 반복 가능한 객체인지 확인
dir([1,2,3])
[1,2,3].__iter__()

# 리스트의 이터레이터를 변수에 저장한뒤 __next__() 메서드 호출하면
# 요소를 차례대로 꺼낼 수 있다.
it = [1,2,3].__iter__()
print(it.__next__())
print(it.__next__())
print(it.__next__())

'Hello, world!'.__iter__()
{'a': 1, 'b': 2}.__iter__()
{1, 2, 3}.__iter__()

it = range(3).__iter__()
it.__next__()
it.__next__()

for i in range(3):
    print(i)
# range(3) - 반복가능한 객체 - __iter__() <-이터레이터 얻고
# 이터레이트는 __next__() 메서드로 반복 한다
# __next__() -> 0 - i에게 0 꺼내 준다
# __next__() -> 1 - i에게 1 꺼내 준다
# __next__() -> 2 - i에게 2 꺼내 준다
# StopIteration -> 반복 끝
    
# 반복 가능한 객체는 요소를 한 번에 하나씩 가져올 수 있는 개체이고
# 이터레이터는 __next__ 메서드를 사용해서 차례대로 값을 꺼낼 수 있는 객체
# 반복 가능한 객체(iterable), 이터레이터(iterator)는 별개의 객체이다
